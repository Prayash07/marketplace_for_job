package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"

	"github.com/Prayash07/practice_project/database/models"
	"github.com/Prayash07/practice_project/domain/user"
	graph1 "github.com/Prayash07/practice_project/graph/generated"
	"github.com/Prayash07/practice_project/graph/model"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// CreateJobAnnouncement is the resolver for the createJobAnnouncement field.
func (r *mutationResolver) CreateJobAnnouncement(ctx context.Context, input model.JobAnnouncementObject) (*model.JobAnnouncement, error) {
	jobAnnouncement := &models.JobAnnouncement{
		Title:       input.Title,
		Description: input.Description,
		URL:         input.URL,
		CompanyID:   input.CompanyID,
	}

	genJobAnnounceMent := &model.JobAnnouncement{
		ID:          jobAnnouncement.ID,
		Title:       jobAnnouncement.Title,
		Description: jobAnnouncement.Description,
		URL:         jobAnnouncement.URL,
	}

	return genJobAnnounceMent, nil
}

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input model.CompanyObject) (*model.Company, error) {
	company := &models.Company{
		Name:          input.Name,
		Description:   input.Description,
		NoOfEmployees: input.NumberOfEmployees,
	}

	err := company.Insert(ctx, r.Db, boil.Infer())

	if err != nil {
		return nil, err
	}

	gqlCompany := &model.Company{
		ID:                company.ID,
		Name:              company.Name,
		Description:       company.Description,
		NumberOfEmployees: company.NoOfEmployees,
	}

	return gqlCompany, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.UserObject) (*model.User, error) {
	user := &models.User{
		Name:    input.Name,
		Address: input.Address,
	}

	err := user.Insert(ctx, r.Db, boil.Infer())
	if err != nil {
		return nil, err
	}

	gqlUser := &model.User{
		Name:    user.Name,
		Address: user.Address,
	}

	education := &models.Education{
		DegreeName: input.DegreeName,
		Years:      input.NoOfYearsForDegree,
		UserId:     user.ID,
	}

	err2 := education.Insert(ctx, r.Db, boil.Infer())
	if err2 != nil {
		return nil, err2
	}

	return gqlUser, nil
}

// JobAnnouncements is the resolver for the jobAnnouncements field.
func (r *queryResolver) JobAnnouncements(ctx context.Context) ([]*model.JobAnnouncement, error) {
	var jobAnnouncement []*model.JobAnnouncement
	jobAnnouncement = append(jobAnnouncement, &model.JobAnnouncement{
		ID:          1,
		Title:       "Job Announcement test",
		Description: "Job Announcement description",
		URL:         "https://www.youbube.com",
	})
	return jobAnnouncement, nil
	//panic(fmt.Errorf("not implemented: JobAnnouncements - jobAnnouncements"))
}

// GetJobAnnouncement is the resolver for the getJobAnnouncement field.
func (r *queryResolver) GetJobAnnouncement(ctx context.Context, id int) (*model.JobAnnouncement, error) {
	panic(fmt.Errorf("not implemented: GetJobAnnouncement - getJobAnnouncement"))
}

// Companies is the resolver for the companies field.
func (r *queryResolver) Companies(ctx context.Context) ([]*model.Company, error) {
	companies, _ := models.Companies().All(context.Background(), r.Db)

	var companiesData []*model.Company

	for _, company := range companies {
		gqlCompany := &model.Company{
			ID:                company.ID,
			Name:              company.Name,
			Description:       company.Description,
			NumberOfEmployees: company.NoOfEmployees,
		}
		companiesData = append(companiesData, gqlCompany)
	}

	return companiesData, nil
}

// GetCompany is the resolver for the getCompany field.
func (r *queryResolver) GetCompany(ctx context.Context, id int) (*model.Company, error) {
	companyData, err := models.Companies(
		qm.Where("id = ?", id),
	).One(ctx, r.Db)

	if err != nil {
		return nil, err
	}

	company := &model.Company{
		ID:                companyData.ID,
		Name:              companyData.Name,
		Description:       companyData.Description,
		NumberOfEmployees: companyData.NoOfEmployees,
	}
	return company, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, _ := models.Users().All(context.Background(), r.Db)

	var usersData []*model.User

	for _, user := range users {
		userGql := &model.User{
			ID:      user.ID,
			Name:    user.Name,
			Address: user.Address,
		}
		usersData = append(usersData, userGql)
	}

	return usersData, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	return user.FetchUserById(ctx, id, r.Db)
}

// Mutation returns graph1.MutationResolver implementation.
func (r *Resolver) Mutation() graph1.MutationResolver { return &mutationResolver{r} }

// Query returns graph1.QueryResolver implementation.
func (r *Resolver) Query() graph1.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
