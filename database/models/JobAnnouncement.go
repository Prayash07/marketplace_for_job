// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// JobAnnouncement is an object representing the database table.
type JobAnnouncement struct {
	ID         int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	DegreeName string `boil:"degree_name" json:"degree_name" toml:"degree_name" yaml:"degree_name"`
	Years      int    `boil:"years" json:"years" toml:"years" yaml:"years"`
	UserID     int    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *jobAnnouncementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jobAnnouncementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JobAnnouncementColumns = struct {
	ID         string
	DegreeName string
	Years      string
	UserID     string
}{
	ID:         "id",
	DegreeName: "degree_name",
	Years:      "years",
	UserID:     "user_id",
}

var JobAnnouncementTableColumns = struct {
	ID         string
	DegreeName string
	Years      string
	UserID     string
}{
	ID:         "JobAnnouncement.id",
	DegreeName: "JobAnnouncement.degree_name",
	Years:      "JobAnnouncement.years",
	UserID:     "JobAnnouncement.user_id",
}

// Generated where

var JobAnnouncementWhere = struct {
	ID         whereHelperint
	DegreeName whereHelperstring
	Years      whereHelperint
	UserID     whereHelperint
}{
	ID:         whereHelperint{field: "`JobAnnouncement`.`id`"},
	DegreeName: whereHelperstring{field: "`JobAnnouncement`.`degree_name`"},
	Years:      whereHelperint{field: "`JobAnnouncement`.`years`"},
	UserID:     whereHelperint{field: "`JobAnnouncement`.`user_id`"},
}

// JobAnnouncementRels is where relationship names are stored.
var JobAnnouncementRels = struct {
	User string
}{
	User: "User",
}

// jobAnnouncementR is where relationships are stored.
type jobAnnouncementR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*jobAnnouncementR) NewStruct() *jobAnnouncementR {
	return &jobAnnouncementR{}
}

func (r *jobAnnouncementR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// jobAnnouncementL is where Load methods for each relationship are stored.
type jobAnnouncementL struct{}

var (
	jobAnnouncementAllColumns            = []string{"id", "degree_name", "years", "user_id"}
	jobAnnouncementColumnsWithoutDefault = []string{"degree_name", "years", "user_id"}
	jobAnnouncementColumnsWithDefault    = []string{"id"}
	jobAnnouncementPrimaryKeyColumns     = []string{"id"}
	jobAnnouncementGeneratedColumns      = []string{}
)

type (
	// JobAnnouncementSlice is an alias for a slice of pointers to JobAnnouncement.
	// This should almost always be used instead of []JobAnnouncement.
	JobAnnouncementSlice []*JobAnnouncement
	// JobAnnouncementHook is the signature for custom JobAnnouncement hook methods
	JobAnnouncementHook func(context.Context, boil.ContextExecutor, *JobAnnouncement) error

	jobAnnouncementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jobAnnouncementType                 = reflect.TypeOf(&JobAnnouncement{})
	jobAnnouncementMapping              = queries.MakeStructMapping(jobAnnouncementType)
	jobAnnouncementPrimaryKeyMapping, _ = queries.BindMapping(jobAnnouncementType, jobAnnouncementMapping, jobAnnouncementPrimaryKeyColumns)
	jobAnnouncementInsertCacheMut       sync.RWMutex
	jobAnnouncementInsertCache          = make(map[string]insertCache)
	jobAnnouncementUpdateCacheMut       sync.RWMutex
	jobAnnouncementUpdateCache          = make(map[string]updateCache)
	jobAnnouncementUpsertCacheMut       sync.RWMutex
	jobAnnouncementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jobAnnouncementAfterSelectHooks []JobAnnouncementHook

var jobAnnouncementBeforeInsertHooks []JobAnnouncementHook
var jobAnnouncementAfterInsertHooks []JobAnnouncementHook

var jobAnnouncementBeforeUpdateHooks []JobAnnouncementHook
var jobAnnouncementAfterUpdateHooks []JobAnnouncementHook

var jobAnnouncementBeforeDeleteHooks []JobAnnouncementHook
var jobAnnouncementAfterDeleteHooks []JobAnnouncementHook

var jobAnnouncementBeforeUpsertHooks []JobAnnouncementHook
var jobAnnouncementAfterUpsertHooks []JobAnnouncementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *JobAnnouncement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAnnouncementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *JobAnnouncement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAnnouncementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *JobAnnouncement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAnnouncementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *JobAnnouncement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAnnouncementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *JobAnnouncement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAnnouncementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *JobAnnouncement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAnnouncementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *JobAnnouncement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAnnouncementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *JobAnnouncement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAnnouncementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *JobAnnouncement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAnnouncementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJobAnnouncementHook registers your hook function for all future operations.
func AddJobAnnouncementHook(hookPoint boil.HookPoint, jobAnnouncementHook JobAnnouncementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		jobAnnouncementAfterSelectHooks = append(jobAnnouncementAfterSelectHooks, jobAnnouncementHook)
	case boil.BeforeInsertHook:
		jobAnnouncementBeforeInsertHooks = append(jobAnnouncementBeforeInsertHooks, jobAnnouncementHook)
	case boil.AfterInsertHook:
		jobAnnouncementAfterInsertHooks = append(jobAnnouncementAfterInsertHooks, jobAnnouncementHook)
	case boil.BeforeUpdateHook:
		jobAnnouncementBeforeUpdateHooks = append(jobAnnouncementBeforeUpdateHooks, jobAnnouncementHook)
	case boil.AfterUpdateHook:
		jobAnnouncementAfterUpdateHooks = append(jobAnnouncementAfterUpdateHooks, jobAnnouncementHook)
	case boil.BeforeDeleteHook:
		jobAnnouncementBeforeDeleteHooks = append(jobAnnouncementBeforeDeleteHooks, jobAnnouncementHook)
	case boil.AfterDeleteHook:
		jobAnnouncementAfterDeleteHooks = append(jobAnnouncementAfterDeleteHooks, jobAnnouncementHook)
	case boil.BeforeUpsertHook:
		jobAnnouncementBeforeUpsertHooks = append(jobAnnouncementBeforeUpsertHooks, jobAnnouncementHook)
	case boil.AfterUpsertHook:
		jobAnnouncementAfterUpsertHooks = append(jobAnnouncementAfterUpsertHooks, jobAnnouncementHook)
	}
}

// OneG returns a single jobAnnouncement record from the query using the global executor.
func (q jobAnnouncementQuery) OneG(ctx context.Context) (*JobAnnouncement, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single jobAnnouncement record from the query.
func (q jobAnnouncementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JobAnnouncement, error) {
	o := &JobAnnouncement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for JobAnnouncement")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all JobAnnouncement records from the query using the global executor.
func (q jobAnnouncementQuery) AllG(ctx context.Context) (JobAnnouncementSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all JobAnnouncement records from the query.
func (q jobAnnouncementQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobAnnouncementSlice, error) {
	var o []*JobAnnouncement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to JobAnnouncement slice")
	}

	if len(jobAnnouncementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all JobAnnouncement records in the query using the global executor
func (q jobAnnouncementQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all JobAnnouncement records in the query.
func (q jobAnnouncementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count JobAnnouncement rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q jobAnnouncementQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q jobAnnouncementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if JobAnnouncement exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *JobAnnouncement) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ID` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jobAnnouncementL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJobAnnouncement interface{}, mods queries.Applicator) error {
	var slice []*JobAnnouncement
	var object *JobAnnouncement

	if singular {
		var ok bool
		object, ok = maybeJobAnnouncement.(*JobAnnouncement)
		if !ok {
			object = new(JobAnnouncement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJobAnnouncement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJobAnnouncement))
			}
		}
	} else {
		s, ok := maybeJobAnnouncement.(*[]*JobAnnouncement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJobAnnouncement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJobAnnouncement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobAnnouncementR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobAnnouncementR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`User`),
		qm.WhereIn(`User.ID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for User")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for User")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserJobAnnouncements = append(foreign.R.UserJobAnnouncements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserJobAnnouncements = append(foreign.R.UserJobAnnouncements, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the jobAnnouncement to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserJobAnnouncements.
// Uses the global database handle.
func (o *JobAnnouncement) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the jobAnnouncement to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserJobAnnouncements.
func (o *JobAnnouncement) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `JobAnnouncement` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, jobAnnouncementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &jobAnnouncementR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserJobAnnouncements: JobAnnouncementSlice{o},
		}
	} else {
		related.R.UserJobAnnouncements = append(related.R.UserJobAnnouncements, o)
	}

	return nil
}

// JobAnnouncements retrieves all the records using an executor.
func JobAnnouncements(mods ...qm.QueryMod) jobAnnouncementQuery {
	mods = append(mods, qm.From("`JobAnnouncement`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`JobAnnouncement`.*"})
	}

	return jobAnnouncementQuery{q}
}

// FindJobAnnouncementG retrieves a single record by ID.
func FindJobAnnouncementG(ctx context.Context, iD int, selectCols ...string) (*JobAnnouncement, error) {
	return FindJobAnnouncement(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindJobAnnouncement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJobAnnouncement(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*JobAnnouncement, error) {
	jobAnnouncementObj := &JobAnnouncement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `JobAnnouncement` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, jobAnnouncementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from JobAnnouncement")
	}

	if err = jobAnnouncementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return jobAnnouncementObj, err
	}

	return jobAnnouncementObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *JobAnnouncement) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JobAnnouncement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no JobAnnouncement provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobAnnouncementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jobAnnouncementInsertCacheMut.RLock()
	cache, cached := jobAnnouncementInsertCache[key]
	jobAnnouncementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jobAnnouncementAllColumns,
			jobAnnouncementColumnsWithDefault,
			jobAnnouncementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jobAnnouncementType, jobAnnouncementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jobAnnouncementType, jobAnnouncementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `JobAnnouncement` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `JobAnnouncement` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `JobAnnouncement` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, jobAnnouncementPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into JobAnnouncement")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == jobAnnouncementMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for JobAnnouncement")
	}

CacheNoHooks:
	if !cached {
		jobAnnouncementInsertCacheMut.Lock()
		jobAnnouncementInsertCache[key] = cache
		jobAnnouncementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single JobAnnouncement record using the global executor.
// See Update for more documentation.
func (o *JobAnnouncement) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the JobAnnouncement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JobAnnouncement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jobAnnouncementUpdateCacheMut.RLock()
	cache, cached := jobAnnouncementUpdateCache[key]
	jobAnnouncementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jobAnnouncementAllColumns,
			jobAnnouncementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update JobAnnouncement, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `JobAnnouncement` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, jobAnnouncementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jobAnnouncementType, jobAnnouncementMapping, append(wl, jobAnnouncementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update JobAnnouncement row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for JobAnnouncement")
	}

	if !cached {
		jobAnnouncementUpdateCacheMut.Lock()
		jobAnnouncementUpdateCache[key] = cache
		jobAnnouncementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q jobAnnouncementQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q jobAnnouncementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for JobAnnouncement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for JobAnnouncement")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o JobAnnouncementSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JobAnnouncementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobAnnouncementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `JobAnnouncement` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jobAnnouncementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in jobAnnouncement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all jobAnnouncement")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *JobAnnouncement) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLJobAnnouncementUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JobAnnouncement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no JobAnnouncement provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobAnnouncementColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLJobAnnouncementUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jobAnnouncementUpsertCacheMut.RLock()
	cache, cached := jobAnnouncementUpsertCache[key]
	jobAnnouncementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jobAnnouncementAllColumns,
			jobAnnouncementColumnsWithDefault,
			jobAnnouncementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			jobAnnouncementAllColumns,
			jobAnnouncementPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert JobAnnouncement, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`JobAnnouncement`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `JobAnnouncement` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(jobAnnouncementType, jobAnnouncementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jobAnnouncementType, jobAnnouncementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for JobAnnouncement")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == jobAnnouncementMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(jobAnnouncementType, jobAnnouncementMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for JobAnnouncement")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for JobAnnouncement")
	}

CacheNoHooks:
	if !cached {
		jobAnnouncementUpsertCacheMut.Lock()
		jobAnnouncementUpsertCache[key] = cache
		jobAnnouncementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single JobAnnouncement record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *JobAnnouncement) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single JobAnnouncement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JobAnnouncement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JobAnnouncement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jobAnnouncementPrimaryKeyMapping)
	sql := "DELETE FROM `JobAnnouncement` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from JobAnnouncement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for JobAnnouncement")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q jobAnnouncementQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q jobAnnouncementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no jobAnnouncementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from JobAnnouncement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for JobAnnouncement")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o JobAnnouncementSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JobAnnouncementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jobAnnouncementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobAnnouncementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `JobAnnouncement` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jobAnnouncementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from jobAnnouncement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for JobAnnouncement")
	}

	if len(jobAnnouncementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *JobAnnouncement) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no JobAnnouncement provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JobAnnouncement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJobAnnouncement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JobAnnouncementSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty JobAnnouncementSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JobAnnouncementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JobAnnouncementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobAnnouncementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `JobAnnouncement`.* FROM `JobAnnouncement` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jobAnnouncementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in JobAnnouncementSlice")
	}

	*o = slice

	return nil
}

// JobAnnouncementExistsG checks if the JobAnnouncement row exists.
func JobAnnouncementExistsG(ctx context.Context, iD int) (bool, error) {
	return JobAnnouncementExists(ctx, boil.GetContextDB(), iD)
}

// JobAnnouncementExists checks if the JobAnnouncement row exists.
func JobAnnouncementExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `JobAnnouncement` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if JobAnnouncement exists")
	}

	return exists, nil
}

// Exists checks if the JobAnnouncement row exists.
func (o *JobAnnouncement) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return JobAnnouncementExists(ctx, exec, o.ID)
}
