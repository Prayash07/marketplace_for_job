// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Education is an object representing the database table.
type Education struct {
	ID         int    `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	DegreeName string `boil:"DegreeName" json:"DegreeName" toml:"DegreeName" yaml:"DegreeName"`
	Years      int    `boil:"Years" json:"Years" toml:"Years" yaml:"Years"`
	UserId     int    `boil:"UserId" json:"UserId" toml:"UserId" yaml:"UserId"`

	R *educationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L educationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EducationColumns = struct {
	ID         string
	DegreeName string
	Years      string
	UserId     string
}{
	ID:         "ID",
	DegreeName: "DegreeName",
	Years:      "Years",
	UserId:     "UserId",
}

var EducationTableColumns = struct {
	ID         string
	DegreeName string
	Years      string
	UserId     string
}{
	ID:         "Education.ID",
	DegreeName: "Education.DegreeName",
	Years:      "Education.Years",
	UserId:     "Education.UserId",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var EducationWhere = struct {
	ID         whereHelperint
	DegreeName whereHelperstring
	Years      whereHelperint
	UserId     whereHelperint
}{
	ID:         whereHelperint{field: "`Education`.`ID`"},
	DegreeName: whereHelperstring{field: "`Education`.`DegreeName`"},
	Years:      whereHelperint{field: "`Education`.`Years`"},
	UserId:     whereHelperint{field: "`Education`.`UserId`"},
}

// EducationRels is where relationship names are stored.
var EducationRels = struct {
	UserIdUser string
}{
	UserIdUser: "UserIdUser",
}

// educationR is where relationships are stored.
type educationR struct {
	UserIdUser *User `boil:"UserIdUser" json:"UserIdUser" toml:"UserIdUser" yaml:"UserIdUser"`
}

// NewStruct creates a new relationship struct
func (*educationR) NewStruct() *educationR {
	return &educationR{}
}

func (r *educationR) GetUserIdUser() *User {
	if r == nil {
		return nil
	}
	return r.UserIdUser
}

// educationL is where Load methods for each relationship are stored.
type educationL struct{}

var (
	educationAllColumns            = []string{"ID", "DegreeName", "Years", "UserId"}
	educationColumnsWithoutDefault = []string{"DegreeName", "Years", "UserId"}
	educationColumnsWithDefault    = []string{"ID"}
	educationPrimaryKeyColumns     = []string{"ID"}
	educationGeneratedColumns      = []string{}
)

type (
	// EducationSlice is an alias for a slice of pointers to Education.
	// This should almost always be used instead of []Education.
	EducationSlice []*Education
	// EducationHook is the signature for custom Education hook methods
	EducationHook func(context.Context, boil.ContextExecutor, *Education) error

	educationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	educationType                 = reflect.TypeOf(&Education{})
	educationMapping              = queries.MakeStructMapping(educationType)
	educationPrimaryKeyMapping, _ = queries.BindMapping(educationType, educationMapping, educationPrimaryKeyColumns)
	educationInsertCacheMut       sync.RWMutex
	educationInsertCache          = make(map[string]insertCache)
	educationUpdateCacheMut       sync.RWMutex
	educationUpdateCache          = make(map[string]updateCache)
	educationUpsertCacheMut       sync.RWMutex
	educationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var educationAfterSelectHooks []EducationHook

var educationBeforeInsertHooks []EducationHook
var educationAfterInsertHooks []EducationHook

var educationBeforeUpdateHooks []EducationHook
var educationAfterUpdateHooks []EducationHook

var educationBeforeDeleteHooks []EducationHook
var educationAfterDeleteHooks []EducationHook

var educationBeforeUpsertHooks []EducationHook
var educationAfterUpsertHooks []EducationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Education) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range educationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Education) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range educationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Education) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range educationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Education) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range educationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Education) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range educationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Education) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range educationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Education) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range educationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Education) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range educationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Education) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range educationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEducationHook registers your hook function for all future operations.
func AddEducationHook(hookPoint boil.HookPoint, educationHook EducationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		educationAfterSelectHooks = append(educationAfterSelectHooks, educationHook)
	case boil.BeforeInsertHook:
		educationBeforeInsertHooks = append(educationBeforeInsertHooks, educationHook)
	case boil.AfterInsertHook:
		educationAfterInsertHooks = append(educationAfterInsertHooks, educationHook)
	case boil.BeforeUpdateHook:
		educationBeforeUpdateHooks = append(educationBeforeUpdateHooks, educationHook)
	case boil.AfterUpdateHook:
		educationAfterUpdateHooks = append(educationAfterUpdateHooks, educationHook)
	case boil.BeforeDeleteHook:
		educationBeforeDeleteHooks = append(educationBeforeDeleteHooks, educationHook)
	case boil.AfterDeleteHook:
		educationAfterDeleteHooks = append(educationAfterDeleteHooks, educationHook)
	case boil.BeforeUpsertHook:
		educationBeforeUpsertHooks = append(educationBeforeUpsertHooks, educationHook)
	case boil.AfterUpsertHook:
		educationAfterUpsertHooks = append(educationAfterUpsertHooks, educationHook)
	}
}

// OneG returns a single education record from the query using the global executor.
func (q educationQuery) OneG(ctx context.Context) (*Education, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single education record from the query.
func (q educationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Education, error) {
	o := &Education{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Education")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Education records from the query using the global executor.
func (q educationQuery) AllG(ctx context.Context) (EducationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Education records from the query.
func (q educationQuery) All(ctx context.Context, exec boil.ContextExecutor) (EducationSlice, error) {
	var o []*Education

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Education slice")
	}

	if len(educationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Education records in the query using the global executor
func (q educationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Education records in the query.
func (q educationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Education rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q educationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q educationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Education exists")
	}

	return count > 0, nil
}

// UserIdUser pointed to by the foreign key.
func (o *Education) UserIdUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ID` = ?", o.UserId),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUserIdUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (educationL) LoadUserIdUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEducation interface{}, mods queries.Applicator) error {
	var slice []*Education
	var object *Education

	if singular {
		var ok bool
		object, ok = maybeEducation.(*Education)
		if !ok {
			object = new(Education)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEducation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEducation))
			}
		}
	} else {
		s, ok := maybeEducation.(*[]*Education)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEducation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEducation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &educationR{}
		}
		args = append(args, object.UserId)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &educationR{}
			}

			for _, a := range args {
				if a == obj.UserId {
					continue Outer
				}
			}

			args = append(args, obj.UserId)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`User`),
		qm.WhereIn(`User.ID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for User")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for User")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserIdUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserIdEducations = append(foreign.R.UserIdEducations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserId == foreign.ID {
				local.R.UserIdUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserIdEducations = append(foreign.R.UserIdEducations, local)
				break
			}
		}
	}

	return nil
}

// SetUserIdUserG of the education to the related item.
// Sets o.R.UserIdUser to related.
// Adds o to related.R.UserIdEducations.
// Uses the global database handle.
func (o *Education) SetUserIdUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUserIdUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUserIdUser of the education to the related item.
// Sets o.R.UserIdUser to related.
// Adds o to related.R.UserIdEducations.
func (o *Education) SetUserIdUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Education` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"UserId"}),
		strmangle.WhereClause("`", "`", 0, educationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserId = related.ID
	if o.R == nil {
		o.R = &educationR{
			UserIdUser: related,
		}
	} else {
		o.R.UserIdUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UserIdEducations: EducationSlice{o},
		}
	} else {
		related.R.UserIdEducations = append(related.R.UserIdEducations, o)
	}

	return nil
}

// Educations retrieves all the records using an executor.
func Educations(mods ...qm.QueryMod) educationQuery {
	mods = append(mods, qm.From("`Education`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`Education`.*"})
	}

	return educationQuery{q}
}

// FindEducationG retrieves a single record by ID.
func FindEducationG(ctx context.Context, iD int, selectCols ...string) (*Education, error) {
	return FindEducation(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindEducation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEducation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Education, error) {
	educationObj := &Education{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Education` where `ID`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, educationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Education")
	}

	if err = educationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return educationObj, err
	}

	return educationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Education) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Education) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Education provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(educationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	educationInsertCacheMut.RLock()
	cache, cached := educationInsertCache[key]
	educationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			educationAllColumns,
			educationColumnsWithDefault,
			educationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(educationType, educationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(educationType, educationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Education` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Education` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Education` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, educationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Education")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == educationMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Education")
	}

CacheNoHooks:
	if !cached {
		educationInsertCacheMut.Lock()
		educationInsertCache[key] = cache
		educationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Education record using the global executor.
// See Update for more documentation.
func (o *Education) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Education.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Education) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	educationUpdateCacheMut.RLock()
	cache, cached := educationUpdateCache[key]
	educationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			educationAllColumns,
			educationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Education, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Education` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, educationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(educationType, educationMapping, append(wl, educationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Education row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Education")
	}

	if !cached {
		educationUpdateCacheMut.Lock()
		educationUpdateCache[key] = cache
		educationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q educationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q educationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Education")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Education")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EducationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EducationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), educationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Education` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, educationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in education slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all education")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Education) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLEducationUniqueColumns = []string{
	"ID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Education) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Education provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(educationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEducationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	educationUpsertCacheMut.RLock()
	cache, cached := educationUpsertCache[key]
	educationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			educationAllColumns,
			educationColumnsWithDefault,
			educationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			educationAllColumns,
			educationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert Education, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`Education`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Education` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(educationType, educationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(educationType, educationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Education")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == educationMapping["ID"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(educationType, educationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Education")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Education")
	}

CacheNoHooks:
	if !cached {
		educationUpsertCacheMut.Lock()
		educationUpsertCache[key] = cache
		educationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Education record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Education) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Education record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Education) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Education provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), educationPrimaryKeyMapping)
	sql := "DELETE FROM `Education` WHERE `ID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Education")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Education")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q educationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q educationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no educationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Education")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Education")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o EducationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EducationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(educationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), educationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Education` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, educationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from education slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Education")
	}

	if len(educationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Education) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Education provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Education) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEducation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EducationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty EducationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EducationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EducationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), educationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Education`.* FROM `Education` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, educationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EducationSlice")
	}

	*o = slice

	return nil
}

// EducationExistsG checks if the Education row exists.
func EducationExistsG(ctx context.Context, iD int) (bool, error) {
	return EducationExists(ctx, boil.GetContextDB(), iD)
}

// EducationExists checks if the Education row exists.
func EducationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Education` where `ID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Education exists")
	}

	return exists, nil
}

// Exists checks if the Education row exists.
func (o *Education) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EducationExists(ctx, exec, o.ID)
}
